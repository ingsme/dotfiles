# Checks
# checks (stolen from zshuery)
if [[ $(uname) = 'Linux' ]]; then
    IS_LINUX=1
fi

if [[ $(uname) = 'Darwin' ]]; then
    IS_MAC=1
fi

if [[ -x `which brew` ]]; then
    HAS_BREW=1
fi

if [[ -x `which apt-get` ]]; then
    HAS_APT=1
fi

if [[ -x `which yum` ]]; then
    HAS_YUM=1
fi

# Install zplug
! [[ -d $XDG_CONFIG_HOME/zplug ]] \
    && git clone https://github.com/b4b4r07/zplug $XDG_CONFIG_HOME/zplug

# Zplug
export ZPLUG_HOME=$XDG_CONFIG_HOME/zplug
source $XDG_CONFIG_HOME/zplug/init.zsh

fpath=($fpath $XDG_CONFIG_HOME/zsh/completions)

zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-completions"
zplug "plugins/colored-man-pages", from:oh-my-zsh
zplug "plugins/colorize", from:oh-my-zsh
zplug "plugins/vagrant", from:oh-my-zsh
zplug "plugins/command-not-found", from:oh-my-zsh
zplug "plugins/sudo", from:oh-my-zsh
zplug "themes/clean", from:oh-my-zsh
zplug "olivierverdier/zsh-git-prompt"
source $XDG_CONFIG_HOME/zplug/repos/olivierverdier/zsh-git-prompt/zshrc.sh
if [[ $IS_LINUX -eq 1 ]]; then
    GIT_PROMPT_EXECUTABLE="haskell"
fi
ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[red]%}%{● %G%}"
ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}%{✖ %G%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[cyan]%}%{✚ %G%}"
ZSH_THEME_GIT_PROMPT_BEHIND="%{↓%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{↑%G%}"

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load --verbose


# Colors
autoload colors; colors
autoload -U compinit
compinit
zmodload -i zsh/complist
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# The variables are wrapped in \%\{\%\}. This should be the case for every
# variable that does not contain space.
# for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
#   eval PR_$COLOR='%{$fg_no_bold[${(L)COLOR}]%}'
#   eval PR_BOLD_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
# done

# eval RESET='$reset_color'
# export PR_RED PR_GREEN PR_YELLOW PR_BLUE PR_WHITE PR_BLACK
# export PR_BOLD_RED PR_BOLD_GREEN PR_BOLD_YELLOW PR_BOLD_BLUE
# export PR_BOLD_WHITE PR_BOLD_BLACK

# Clear LSCOLORS
# unset LSCOLORS

# Main change, you can see directories on a dark background
#expor tLSCOLORS=gxfxcxdxbxegedabagacad

# export CLICOLOR=1
# export LS_COLORS=exfxcxdxbxegedabagacad

# Setopt
# ===== Basics
setopt no_beep # don't beep on error
setopt interactive_comments # Allow comments even in interactive shells (especially for Muness)

# ===== Changing Directories
setopt auto_cd # If you type foo, and it isn't a command, and it is a directory in your cdpath, go there
setopt cdablevarS # if argument to cd is the name of a parameter whose value is a valid directory, it will become the current directory
setopt pushd_ignore_dups # don't push multiple copies of the same directory onto the directory stack
cdpath=( ~ /disk2/puppet /disk2/packages /scratch /disk2)

# ===== Expansion and Globbing
setopt extended_glob # treat #, ~, and ^ as part of patterns for filename generation

# ===== History
setopt append_history # Allow multiple terminal sessions to all append to one zsh command history
setopt extended_history # save timestamp of command and duration
setopt inc_append_history # Add comamnds as they are typed, don't wait until shell exit
setopt hist_expire_dups_first # when trimming history, lose oldest duplicates first
setopt hist_ignore_dups # Do not write events to history that are duplicates of previous events
setopt hist_ignore_space # remove command line from history list when first character on the line is a space
setopt hist_find_no_dups # When searching history don't display results already cycled through twice
setopt hist_reduce_blanks # Remove extra blanks from each command line being added to history
setopt hist_verify # don't execute, just expand history
setopt share_history # imports new commands and appends typed commands to history

# ===== Completion
setopt always_to_end # When completing from the middle of a word, move the cursor to the end of the word
setopt auto_menu # show completion menu on successive tab press. needs unsetop menu_complete to work
setopt auto_name_dirs # any parameter that is set to the absolute name of a directory immediately becomes a name for that directory
setopt complete_in_word # Allow completion from within a word/phrase

setopt menu_complete # do not autoselect the first completion entry

# ===== Correction
# setopt correct # spelling correction for commands
# setopt correctall # spelling correction for arguments

# ===== Prompt
setopt prompt_subst # Enable parameter expansion, command substitution, and arithmetic expansion in the prompt
setopt transient_rprompt # only show the rprompt on the current prompt

# ===== Scripts and Functions
# setopt nomultios # perform implicit tees or cats when multiple redirections are attempted


# Exports
# Setup terminal, and turn on colors
# export TERM=xterm-256color
export CLICOLOR=1
# export LSCOLORS=Gxfxcxdxbxegedabagacad

# Enable color in grep
# export GREP_OPTIONS='--color=auto'
export GREP_COLOR='3;33'

# Completion
autoload -U compinit && compinit
zmodload -i zsh/complist

# man zshcontrib
zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:*' enable git #svn cvs

# Enable completion caching, use rehash to clear
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path $XDG_CACHE_HOME/zsh//$HOST

# Fallback to built in ls colors
zstyle ':completion:*' list-colors ''

# Make cd ../ tab completion work
zstyle ':completion:*' special-dirs true

# Make the list prompt friendly
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'

# Make the selection prompt friendly when there are a lot of choices
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# Add simple colors to kill
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

zstyle ':completion:*' menu select=1 _complete _ignored _approximate

# insert all expansions for expand completer
# zstyle ':completion:*:expand:*' tag-order all-expansions

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*' add-space true
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:scp:*' tag-order files users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users hosts-ipaddr
zstyle '*' single-ignored show

#Bindkeys
bindkey -v   # Default to standard vi bindings, regardless of editor string

zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey "^K"      kill-whole-line                      # ctrl-k
bindkey "^R"      history-incremental-search-backward  # ctrl-r
bindkey "^A"      beginning-of-line                    # ctrl-a
bindkey "^E"      end-of-line                          # ctrl-e
# bindkey "^[0A"    history-search-backward              # up arrow
# bindkey "^[0B"    history-search-forward               # down arrow
bindkey "^D"      delete-char                          # ctrl-d
bindkey "^F"      forward-char                         # ctrl-f
bindkey "^B"      backward-char                        # ctrl-b
bindkey "\e\e"    sudo-command-line

# Functions
# -------------------------------------------------------------------
# ssh name change
# (from https://gist.github.com/florianbeer/ee02c149a7e25f643491)
# -------------------------------------------------------------------
# ssh() {
#     if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
#         tmux rename-window "$(echo $* | cut -d @ -f 2 | cut -d . -f 1)"
#         command ssh "$@"
#         tmux set-window-option automatic-rename "on" 1>/dev/null
#     else
#         command ssh "$@"
#     fi
# }
# -------------------------------------------------------------------
# compressed file expander
# (from https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh)
# -------------------------------------------------------------------
ex() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2) tar xvjf $1;;
            *.tar.gz) tar xvzf $1;;
            *.tar.xz) tar xvJf $1;;
            *.tar.lzma) tar --lzma xvf $1;;
            *.bz2) bunzip $1;;
            *.rar) unrar $1;;
            *.gz) gunzip $1;;
            *.tar) tar xvf $1;;
            *.tbz2) tar xvjf $1;;
            *.tgz) tar xvzf $1;;
            *.zip) unzip $1;;
            *.Z) uncompress $1;;
            *.7z) 7z x $1;;
            *.dmg) hdiutul mount $1;; # mount OS X disk images
            *) echo "'$1' cannot be extracted via >ex<";;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# -------------------------------------------------------------------
# any function from http://onethingwell.org/post/14669173541/any
# search for running processes
# -------------------------------------------------------------------
any() {
    emulate -L zsh
    unsetopt KSH_ARRAYS
    if [[ -z "$1" ]] ; then
        echo "any - grep for process(es) by keyword" >&2
        echo "Usage: any " >&2 ; return 1
    else
        ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
    fi
}

# -------------------------------------------------------------------
# display a neatly formatted path
# -------------------------------------------------------------------
path() {
    echo $PATH | tr ":" "\n" | \
        awk "{ sub(\"/usr\",   \"$fg_no_bold[green]/usr$reset_color\"); \
        sub(\"/bin\",   \"$fg_no_bold[blue]/bin$reset_color\"); \
        sub(\"/opt\",   \"$fg_no_bold[cyan]/opt$reset_color\"); \
        sub(\"/sbin\",  \"$fg_no_bold[magenta]/sbin$reset_color\"); \
        sub(\"/local\", \"$fg_no_bold[yellow]/local$reset_color\"); \
        print }"
}

# -------------------------------------------------------------------
# Mac specific functions
# -------------------------------------------------------------------
if [[ $IS_MAC -eq 1 ]]; then

    # view man pages in Preview
    pman() { ps=`mktemp -t manpageXXXX`.ps ; man -t $@ > "$ps" ; open "$ps" ; }

    # function to show interface IP assignments
    ips() { foo=`/Users/mark/bin/getip.py; /Users/mark/bin/getip.py en0; /Users/mark/bin/getip.py en1`; echo $foo; }

    # notify function - http://hints.macworld.com/article.php?story=20120831112030251
    notify() { automator -D title=$1 -D subtitle=$2 -D message=$3 ~/Library/Workflows/DisplayNotification.wflow }
fi

for f in $XDG_CONFIG_HOME/bash/functions.d/*; do source "$f"; done

# History
HISTSIZE=10000
SAVEHIST=9000
HISTFILE=~/.zsh_history

# Zsh_hooks
function precmd {
    # vcs_info
    # Put the string "hostname::/full/directory/path" in the title bar:
    echo -ne "\e]2;$PWD\a"

    # Put the parentdir/currentdir in the tab
    echo -ne "\e]1;$PWD:h:t/$PWD:t\a"
}

# function set_running_app {
#   printf "\e]1; $PWD:t:$(history $HISTCMD | cut -b7- ) \a"
# }

# function preexec {
#   set_running_app
# }

# function postexec {
#   set_running_app
# }


# Misc
# Use keychain, if it is available.
[[ -f $(which keychain 2> /dev/null) ]] && \
    eval $(keychain --eval --agents ssh id_rsa)

# [[ -f $HOME/.keychain/$HOSTNAME-sh ]] && \
    #     source $HOME/.keychain/$HOSTNAME-sh

#Aliases
source "$XDG_CONFIG_HOME/alias/aliases"

[[ $IS_LINUX -eq 1 ]] && \
    alias ls='ls --group-directories-first --color=auto -h'
[[ $IS_MAC -eq 1 ]] && \
    alias ls='ls -Gh'

alias -- -='cd -'
alias ...=../..
alias ....=../../..
alias .....=../../../..
alias ......=../../../../..
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'
alias pcat='pygmentize -f terminal -O style=native -g'
alias _=sudo
alias afind='ack-grep -il'
alias aps='aptitude search'
alias apss='aptitude show'
alias colorize=colorize_via_pygmentize
alias d='dirs -v | head -10'
alias dfu='df -hT -x devtmpfs -x tmpfs'
alias dut='du -hx * | sort -rh | head -10'
alias egrep='noglob egrep --color=auto'
alias fgrep='noglob fgrep --color=auto'
alias globurl='noglob urlglobber '
alias grep='noglob grep --color=auto'
alias history='fc -l 1'
alias hjemmekontor='rdesktop -g 1280x960 -a 16 -k no -d UiB hjemmekontor.uib.no &'
alias l='ls -l'
alias la='ls -A'
alias ll='ls -al'
alias lsa='ls -lah'
alias md='mkdir -p'
alias midgard='rdesktop -g 1280x960 -a 16 -k no -d UiB midgard.uib.no &'
alias mkdir='mkdir -pv'
alias nvim='VIMINIT= nvim'
alias please=sudo
alias po=popd
alias pu=pushd
alias pwdb='cd && keepassx -cfg /home/ism089/.pwdb.ini &'
alias rd=rmdir
alias sz='source $HOME/.zshrc'
alias which-command=whence

# alias pwdb="cd && keepassx -cfg $HOME/.pwdb.ini &"
# alias hjemmekontor="rdesktop -g 1280x960 -a 16 -k no -d UiB hjemmekontor.uib.no &"
# alias midgard="rdesktop -g 1280x960 -a 16 -k no -d UiB midgard.uib.no &"
# alias aps='aptitude search'
# alias apss='aptitude show'
# alias ll='ls -al'
# alias la='ls -A'
# alias l='ls -l'
# alias mkdir='mkdir -pv'
# alias grep='grep --color=auto'
# alias fgrep='fgrep --color=auto'
# alias egrep='egrep --color=auto'
# alias dut="du -hx * | sort -rh | head -10"
# alias dfu="df -hT -x devtmpfs -x tmpfs"
# alias sz='source $HOME/.zshrc'
# alias nvim='VIMINIT= nvim'

[[ $IS_MAC -eq 1 ]] && \
    export LSCOLORS=exfxcxdxbxegedabagacad
    export PYENV_ROOT="~/Library/pyenv"
if [[ $IS_LINUX -eq 1 ]]; then
    ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}%{✔%G%}"
    export PYENV_ROOT="/scratch/pyenv"
fi
PROMPT='%{$fg[$NCOLOR]%}%B%n%b%{$reset_color%}:%{$fg[blue]%}%B%c/%b%{$reset_color%} $(git_super_status)%(!.#.$) '
unset RPROMPT

# Set up pyenv
export PATH="$PYENV_ROOT/bin:$PATH:/usr/local/bin"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
source "$PYENV_ROOT//completions/pyenv.zsh"
export PATH=$(pyenv root):$PATH
# export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

export GPGKEY=135E1A043370A237

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
