" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ========= XDG ====================
if empty($XDG_CACHE_HOME)
        let $XDG_CACHE_HOME="$HOME/.cache"
endif
if empty($XDG_CONFIG_HOME)
        let $XDG_CONFIG_HOME="$HOME/.config"
endif
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
"set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$XDG_CONFIG_HOME/vim/bundle/neobundle


" The mapleader has to be set before we load plugins
let mapleader="\<space>"

" Plugin configuration {{{
" Initialization {{{
filetype off

let GotTheNeo=1
let neobundle_readme=expand('$XDG_CONFIG_HOME/vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
  echo ""
  silent !mkdir -p $XDG_CONFIG_HOME/vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim $XDG_CONFIG_HOME/vim/bundle/neobundle.vim
  let GotTheNeo=0
endif

set rtp+=$XDG_CONFIG_HOME/vim/bundle/neobundle.vim
"set rtp+=$XDG_CONFIG_HOME/vim/neobundles
call neobundle#begin(expand("$XDG_CONFIG_HOME/vim/bundle"))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim' " }}}

" Look and Feel {{{
NeoBundle "altercation/vim-colors-solarized"
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
NeoBundle 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="hard"
NeoBundle "w0ng/vim-hybrid"
NeoBundle "zeis/vim-kolor"
NeoBundle "tomasr/molokai"
NeoBundle "bling/vim-airline"
set laststatus=2

let g:airline_theme='raven'
let g:airline#extensions#branch#enabled = 1
let g:airline_powerline_fonts=1
let g:airline#extensions#whitespace#enabled#show_message = 1
let g:airline#extensions#hunks#non_zero_only = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_min_count = 1
NeoBundle "adonis0147/prettyGuides"
" }}}

" IDE settings {{{
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'jistr/vim-nerdtree-tabs'
nmap <silent> <leader>f <Plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeIgnore=['\.git','\.hg','\.vagrant']
NeoBundle "scrooloose/syntastic"
" map for syntastic errors window
nnoremap <LEADER>e :SyntasticCheck<CR>:Errors<CR>

" syntastic checking mode
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'python', 'perl', 'shell', 'puppet' ],
      \ 'passive_filetypes': ['php', 'html'] }

let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol  = '⚡'
let g:syntastic_style_warning_symbol  = '⚡'

" check syntax on file open
let g:syntastic_check_on_open=1
" autoclose syntastic's error windown when no errors
let g:syntastic_auto_loc_list=2
NeoBundle "xolox/vim-misc"
NeoBundle "majutsushi/tagbar" " {{{
nmap <silent> <leader>tb :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)
autocmd FileType python,puppet nested :TagbarOpen
let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }
let g:tagbar_type_make = {
      \ 'kinds':[
      \ 'm:macros',
      \ 't:targets'
      \ ]
      \}
let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \ }
let g:tagbar_type_puppet = {
      \ 'ctagstype': 'puppet',
      \ 'kinds': [
      \ 'c:class',
      \ 's:site',
      \ 'n:node',
      \ 'd:definition',
      \ 'r:resource',
      \ 'f:default'
      \]
      \}
let g:tagbar_type_r = {
      \ 'ctagstype' : 'r',
      \ 'kinds'     : [
      \ 'f:Functions',
      \ 'g:GlobalVariables',
      \ 'v:FunctionVariables',
      \ ]
      \ }
let g:tagbar_type_snippets = {
      \ 'ctagstype' : 'snippets',
      \ 'kinds' : [
      \ 's:snippets',
      \ ]
      \ }
let g:tagbar_type_tex = {
      \ 'ctagstype' : 'latex',
      \ 'kinds' : [
      \ 's:sections',
      \ 'g:graphics:0:0',
      \ 'l:labels',
      \ 'r:refs:1:0',
      \ 'p:pagerefs:1:0'
      \ ],
      \ 'sort' : 0,
      \ }
NeoBundle "kien/ctrlp.vim"
map <leader>pb :CtrlPBuffer<CR>
set wildignore+=*/tmp/*,*.so,*.swp
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
NeoBundle "vim-scripts/a.vim"
NeoBundle "Valloric/YouCompleteMe", {
      \ 'build': {
      \ 'unix': './install.sh',
      \ 'mac': './install.sh'
      \ },
      \ } "}}}
" }}}

" GIT {{{
NeoBundle "airblade/vim-gitgutter"
let g:gitgutter_max_signs = 1000
NeoBundle "tpope/vim-fugitive"
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
autocmd BufReadPost fugitive://* set bufhidden=delete
NeoBundle "gitignore"

" }}}

" Text editing features {{{
NeoBundle  "SirVer/ultisnips"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<leader>u"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
NeoBundle  "honza/vim-snippets"
NeoBundleLazy 'sjl/gundo.vim', { 'autoload' : {'commands': 'GundoToggle'}}
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_preview_bottom=1
NeoBundle 'tpope/vim-characterize'
NeoBundle "vits/ZoomWin"
NeoBundle "briandoll/change-inside-surroundings.vim"
NeoBundle "jiangmiao/auto-pairs"
"System Shortcuts:
"    <CR>  : Insert new indented line after return if cursor in blank brackets or quotes.
"    <BS>  : Delete brackets in pair
"    <M-p> : Toggle Autopairs (g:AutoPairsShortcutToggle)
"    <M-e> : Fast Wrap (g:AutoPairsShortcutFastWrap)
"    <M-n> : Jump to next closed pair (g:AutoPairsShortcutJump)
"    <M-b> : BackInsert (g:AutoPairsShortcutBackInsert)
"
"If <M-p> <M-e> or <M-n> conflict with another keys or want to bind to another keys, add
"
"    let g:AutoPairsShortcutToggle = '<another key>'
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutJump = '<C-a>'
"let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutBackInsert = '<C-b>'
let g:AutoPairsShortcutFastWrap = '<C-e>'
NeoBundle "justinmk/vim-sneak"
NeoBundle 'godlygeek/tabular'
nmap <Leader>a== :Tabularize /=<CR>
vmap <Leader>a== :Tabularize /=<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
NeoBundle 'gorkunov/smartpairs.vim', {
      \ 'autoload': {
      \  'commands': [ 'SmartPairs', 'SmartPairsI', 'SmartPairsA' ],
      \  'mappings': [[ 'n', 'viv' ], [ 'v', 'v' ]]}}
NeoBundle "rafi/vim-tinycomment.git", {
      \ 'directory': 'tinycomment',
      \ 'augroup': 'tinycomment',
      \ 'commands': [ 'TinyCommentLines', 'TinyCommentBlock' ],
      \ 'mappings': [
      \ [ 'n', '<leader>v' ], [ 'v', '<leader>v' ],
      \ [ 'v', '<leader>V' ]
      \ ]}
" Adding comments for i3 filetype
augroup tinycomment
    autocmd FileType i3 setlocal commentstring=#%s
augroup END
NeoBundle 'nelstrom/vim-markdown-folding'
" }}}

" Syntax {{{
NeoBundleLazy 'klen/python-mode', {'autoload': {'filetypes': ['python']}}
" Neocomplete handles autocompletion
let g:pymode_rope_completion = 0
let g:pymode_lint_on_fly = 1
nmap <leader>la :PymodeLintAuto<CR>
NeoBundle  "davidhalter/jedi-vim", {
      \ 'build': {
      \     'unix': 'git submodule update --init',
      \     'mac': 'git submodule update --init',
      \   },
      \ }
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"

let g:jedi#goto_assignments_command = "<leader>pa"
let g:jedi#goto_definitions_command = "<leader>pd"
let g:jedi#documentation_command = "<leader>pk"
let g:jedi#usages_command = "<leader>pu"
let g:jedi#rename_command = "<leader>pr"
NeoBundle "jez/vim-c0"
NeoBundle "jez/vim-ispc"
NeoBundle "PotatoesMaster/i3-vim-syntax"
NeoBundle "lilydjwg/colorizer"
NeoBundle 'kchmck/vim-coffee-script',{'autoload' : {
      \ 'commands' : [
      \ 'CoffeeCompile', 'CoffeeLint', 'CoffeeMake',
      \ 'CoffeeRun', 'CoffeeWatch'],
      \ 'filetypes' : ['coffee']
      \ }}
NeoBundle "vim-ruby/vim-ruby"
NeoBundle "rodjek/vim-puppet"
" }}}

" Misc {{{
NeoBundle 'mhinz/vim-startify'
let g:startify_change_to_vcs_root = 1
let g:startify_session_dir = 'directory/sessions'
let g:startify_show_sessions = 1
autocmd User Startified setlocal buftype=
NeoBundle "jez/vim-superman"
NeoBundle "christoomey/vim-tmux-navigator"
NeoBundle "edkolev/tmuxline.vim"
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }
" }}}

" }}}

" General settings {{{
set foldlevel=99
set foldlevelstart=0

set number
set relativenumber
set cursorline!
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
set backspace=2 " Makes backspace work like it should!
" Indentation {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set nojoinspaces "}}}

" Reading/Writing {{{
set noautowrite             " Never write a file unless I request it.
set noautowriteall          " NEVER.
set autoread                " (Don't) automatically re-read changed files.
set modeline                " Allow vim options to be embedded in files;
set modelines=5             " they must be within the first or last 5 lines.
set ffs=unix,dos,mac        " Try recognizing dos, unix, and mac line endings.
set encoding=utf-8 "}}}

" Searching {{{
set incsearch
set showmatch
set hlsearch
set smartcase
set ignorecase "}}}

"""" History
set history=1000
set undofile
set undoreload=1000
set noswapfile

"""" Split
set splitbelow
set splitright

" " This makes vim act like all other editors, buffers can
" " exist in the background without being in a window.
" " http://items.sjbach.com/319/configuring-vim-right
set hidden

"""" Keep 3 lines above and below cursor
set scrolloff=3

if has("syntax")
  syntax on
endif

if has('clipboard')
    if has('unnamedplus')
        set clipboard=unnamed,unnamedplus
    else
        set clipboard=unnamed
    endif
endif

if has('patch-7.3.541')
    set formatoptions+=j " Remove comment leader when joining lines
endif

" Remove triling white space before saving
autocmd BufFilePre * :%s/\s\+$//e

"""" Make it beautiful - colors and fonts
"colorscheme solarized
"colorscheme hybrid
colorscheme gruvbox
"colorscheme kolor
set background=dark

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:·,extends:↷,precedes:↶

" Use h,j,k,l to move around in vim! Don't cheat!
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" change cursor position in insert mode
inoremap <C-h> <left>
inoremap <C-l> <right>

" ================ Completion =======================

" set wildmode=list:longest
" set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
" set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
" set wildignore+=*vim/backups*
" set wildignore+=*sass-cache*
" set wildignore+=*DS_Store*
" set wildignore+=vendor/rails/**
" set wildignore+=vendor/cache/**
" set wildignore+=*.gem
" set wildignore+=log/**
" set wildignore+=tmp/**
" set wildignore+=*.png,*.jpg,*.gif

" ------------
augroup my_auto_commands
    autocmd!
    autocmd BufNewFile,BufRead *.neobundle set filetype=vim
    autocmd BufNewFile,BufRead *.vundle set filetype=vim
    autocmd BufNewFile,BufRead *.tex set filetype=latex
    autocmd FileType gitcommit setlocal spell
    autocmd FileType vim setlocal fdm=marker ts=2 sts=2 sw=2 fdl=99
    autocmd FileType ruby,yaml,erb,sass set ai sw=2 sts=2 ts=2 et fdl=99
    autocmd FileType python set colorcolumn=79
    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END

" ========================================
" General vim sanity improvements
" ========================================
" Make 0 go to the first character rather than the beginning
" of the line. When we're programming, we're almost always
" interested in working with text rather than empty space. If
" you want the traditional beginning of line, use ^
nnoremap 0 ^
nnoremap ^ 0

" Move between Vim and Tmux windows {{{
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      " The sleep and & gives time to get back to vim so tmux's focus tracking
      " can kick in and send us our ^[[O
      execute "silent !sh -c 'sleep 0.01; tmux select-pane -" . a:tmuxdir . "' &"
      redraw!
    endif
  endfunction
  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te
  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<CR>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<CR>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<CR>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<CR>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif
" }}}

" Some usefull options
inoremap jk <esc>
vnoremap jk <esc>

"" Some toggles
nmap <silent> <unique> <Leader>tn :call ToggleRelativeAbsoluteNumber()<CR>
function! ToggleRelativeAbsoluteNumber() "{{{
  if !&number && !&relativenumber
      set number
      set norelativenumber
  elseif &number && !&relativenumber
      set nonumber
      set relativenumber
  elseif !&number && &relativenumber
      set number
      set relativenumber
  elseif &number && &relativenumber
      set nonumber
      set norelativenumber
  endif
endfunction "}}}

map <Leader>pp :call  TogglePaste()<CR>
function!  TogglePaste() "{{{
    if  !&paste
        set invpaste
        :PrettyGuidesDisable
        set nonumber
        set norelativenumber
    elseif  &paste
        set invpaste
        :PrettyGuidesEnable
        set number
        set relativenumber
    endif
endfunction "}}}

function! Preserve(command) "{{{
  let _s=@/
  let l = line(".")
  let c = col(".")
  execute a:command
  let @/=_s
  call cursor(l,c)
endfunction "}}}

"Go to last edit location with <Leader>.
nnoremap <Leader>. '.

"" Use tab for indenting in normal/visual modes
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

nmap <silent> <Leader>qc :cclose<CR>
nmap <silent> <Leader>qo :copen<CR>

" Zoom in and out of current window with <Leader>gz
map <silent> <Leader>gz <C-w>o

" choose buffer with <Leader>1..9
for i in [1,2,3,4,5,6,7,8,9]
    exec "map <Leader>" . i . " :buffer " . i . "<cr>"
endfor

" Create window splits easier. The default
" way is Ctrl-w,v and Ctrl-w,s. I remap
    " this to vv and ss
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Resize windows with arrow keys
nnoremap <D-Up> <C-w>+
nnoremap <D-Down> <C-w>-
nnoremap <D-Left> <C-w><
nnoremap <D-Right>  <C-w>>

"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" Type <Leader>hl to toggle highlighting on/off, and show current value.
noremap <Leader>hl :set hlsearch! hlsearch?<CR>

" Abbreviations
iabbrev @@ ingar.smedstad@adm.uib.no
iabbrev ccopy Copyright 2014 Ingar Smedstad.

" w!! to write a file as sudo
cmap w!! w !sudo tee % >/dev/null

" Execution permissions by default to shebang (#!) files {{{
augroup shebang_chmod
  autocmd!
  autocmd BufNewFile  * let b:brand_new_file = 1
  autocmd BufWritePost * unlet! b:brand_new_file
  autocmd BufWritePre *
        \ if exists('b:brand_new_file') |
        \   if getline(1) =~ '^#!' |
        \     let b:chmod_post = '+x' |
        \   endif |
        \ endif
  autocmd BufWritePost,FileWritePost *
        \ if exists('b:chmod_post') && executable('chmod') |
        \   silent! execute '!chmod '.b:chmod_post.' "<afile>"' |
        \   unlet b:chmod_post |
        \ endif
augroup END "}}}
" }}}
