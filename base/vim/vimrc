  " Initialisation {{{1
set nocompatible
set nomore

augroup MyAuGroup
  autocmd!
augroup END

" ========= XDG ==================== {{{2
if empty($XDG_CACHE_HOME)
  let $XDG_CACHE_HOME="$HOME/.cache"
endif
if empty($XDG_CONFIG_HOME)
  let $XDG_CONFIG_HOME="$HOME/.config"
endif
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
set directory=$XDG_CACHE_HOME/vim
set backupdir=$XDG_CACHE_HOME/vim/backup
set undodir=$XDG_CACHE_HOME/vim/undo
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
"set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$XDG_CONFIG_HOME/vim/bundle/neobundle

function! EnsureExists(path)
  if !isdirectory(expand(a:path))
    call mkdir(expand(a:path))
  endif
endfunction
call EnsureExists(&directory)
call EnsureExists(&backupdir)
call EnsureExists(&undodir)

" The mapleader has to be set before we load plugins
let mapleader="\<space>"

" Plugin configuration  {{{1
" Initialization  {{{2
filetype off

let GotTheNeo=1
let neobundle_readme=expand('$XDG_CONFIG_HOME/vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
  echo ""
  silent !mkdir -p $XDG_CONFIG_HOME/vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim $XDG_CONFIG_HOME/vim/bundle/neobundle.vim
  let GotTheNeo=0
endif

set rtp+=$XDG_CONFIG_HOME/vim/bundle/neobundle.vim
"set rtp+=$XDG_CONFIG_HOME/vim/neobundles
call neobundle#begin(expand("$XDG_CONFIG_HOME/vim/bundle"))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Look and Feel  {{{2
NeoBundle 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"

NeoBundle 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="hard"

NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'zeis/vim-kolor'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
set laststatus=2
"let g:airline_theme='raven'
let g:airline_theme='luna'
let g:airline#extensions#branch#enabled = 1
let g:airline_powerline_fonts=1
let g:airline#extensions#whitespace#enabled#show_message = 1
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_min_count = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

NeoBundle 'adonis0147/prettyGuides'
" IDE settings  {{{2
NeoBundle 'scrooloose/nerdtree', {
      \ 'autoload': {
      \   'commands': [
      \     'NERDTreeMirrorToggle', 'NERDTree', 'NERDTreeToggle', 'NERDTreeClose']}}
NeoBundle 'jistr/vim-nerdtree-tabs', {
      \ 'autoload': {
      \   'commands': ["NERDTreeToggle", "NERDTree", "NERDTreeClose"]}}
nmap <silent> <leader>f <Plug>NERDTreeMirrorToggle<CR>
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeIgnore=['\.git','\.hg','\.vagrant']

NeoBundle 'scrooloose/syntastic'
" map for syntastic errors window
nnoremap <LEADER>e :SyntasticCheck<CR>:Errors<CR>
" syntastic checking mode
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'python', 'perl', 'shell', 'puppet' ],
      \ 'passive_filetypes': ['php', 'html'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol  = '⚡'
let g:syntastic_style_warning_symbol  = '⚡'
" check syntax on file open
let g:syntastic_check_on_open=1
" autoclose syntastic's error windown when no errors
let g:syntastic_auto_loc_list=2

NeoBundle 'xolox/vim-misc'
NeoBundle 'majutsushi/tagbar' "{{{3
nmap <silent> <leader>tb :TagbarToggle<CR>
autocmd FileType python,puppet nested :TagbarOpen
let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }
let g:tagbar_type_make = {
      \ 'kinds':[
      \ 'm:macros',
      \ 't:targets'
      \ ]
      \}
let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \ }
let g:tagbar_type_puppet = {
      \ 'ctagstype': 'puppet',
      \ 'kinds': [
      \ 'c:class',
      \ 's:site',
      \ 'n:node',
      \ 'd:definition',
      \ 'r:resource',
      \ 'f:default'
      \]
      \}
let g:tagbar_type_r = {
      \ 'ctagstype' : 'r',
      \ 'kinds'     : [
      \ 'f:Functions',
      \ 'g:GlobalVariables',
      \ 'v:FunctionVariables',
      \ ]
      \ }
let g:tagbar_type_snippets = {
      \ 'ctagstype' : 'snippets',
      \ 'kinds' : [
      \ 's:snippets',
      \ ]
      \ }
let g:tagbar_type_tex = {
      \ 'ctagstype' : 'latex',
      \ 'kinds' : [
      \ 's:sections',
      \ 'g:graphics:0:0',
      \ 'l:labels',
      \ 'r:refs:1:0',
      \ 'p:pagerefs:1:0'
      \ ],
      \ 'sort' : 0,
      \ } "}}}3

NeoBundle 'Valloric/YouCompleteMe', {
      \   'build' : {
      \     'mac' : './install.sh',
      \     'unix': './install.sh'
      \   }
      \ }

"NeoBundle 'Shougo/neocomplete.vim', {
"      \ 'depends': 'Shougo/context_filetype.vim',
"      \ 'disabled': ! has('lua'),
"      \ 'insert': 1
"      \ }
"nnoremap <Leader>x :NeoCompleteToggle<CR> "{{{
"let g:acp_enableAtStartup = 0
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#enable_camel_case = 1
"let g:neocomplete#enable_underbar_case = 1
"let g:neocomplete#enable_auto_delimiter = 1
"let g:neocomplete#force_overwrite_completefunc = 1
"
"" Define keyword.
""if !exists('g:neocomplete#keyword_patterns')
""  let g:neocomplete#keyword_patterns = {}
""endif
""let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
"inoremap <expr><Space> neocomplete#close_popup() . "\<Space>"
"inoremap <expr><BS> pumvisible() ? neocomplete#smart_close_popup() . "\<BS>" : delimitMate#BS()
"inoremap <silent><CR> <C-R>=<SID>my_rc_function()<CR>
"function! s:my_rc_function()
"  " Fore inserting <CR> ket.
"  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
"endfunction
"
"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
"autocmd FileType txt NeoCompleteLock
"
"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
"  let g:neocomplete#sources#omni#input_patterns = {}
"endif
"if !exists('g:neocomplete#force_omni_input_patterns')
"  let g:neocomplete#force_omni_input_patterns = {}
"endif "}}}

" Unite  {{{2
NeoBundle 'Shougo/unite.vim', {
      \ 'depends': 'Shougo/tabpagebuffer.vim',
      \ 'commands': [
      \   { 'name': 'Unite', 'complete': 'customlist,unite#complete_source' }
      \ ]}
if executable('ag')
  let g:unite_source_grep_command='ag'
  let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
  let g:unite_source_grep_recursive_opt=''
elseif executable('ack')
  let g:unite_source_grep_command='ack'
  let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
  let g:unite_source_grep_recursive_opt=''
endif
function! s:unite_settings()
  nmap <buffer> Q <plug>(unite_exit)
  nmap <buffer> <esc> <plug>(unite_exit)
  "  imap <buffer> <esc> <plug>(unite_exit)
endfunction
autocmd FileType unite call s:unite_settings()
nmap f [unite]
nnoremap [unite] <nop>
nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -start-insert -buffer-name=mixed file_rec/async:! buffer file_mru bookmark<cr><c-u>
nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

NeoBundleLazy 'Shougo/neomru.vim', {'autoload':{'unite_sources':'file_mru'}}
NeoBundleLazy 'osyo-manga/unite-airline_themes', {'autoload':{'unite_sources':'airline_themes'}} "{{{
nnoremap <silent> [unite]a :<C-u>Unite -winheight=10 -auto-preview -buffer-name=airline_themes airline_themes<cr>
"}}}
NeoBundleLazy 'ujihisa/unite-colorscheme', {'autoload':{'unite_sources':'colorscheme'}} "{{{
nnoremap <silent> [unite]c :<C-u>Unite -winheight=10 -auto-preview -buffer-name=colorschemes colorscheme<cr>
"}}}
NeoBundleLazy 'tsukkee/unite-tag', {'autoload':{'unite_sources':['tag','tag/file', 'tag/include']}} "{{{
nnoremap <silent> [unite]t :<C-u>Unite -auto-resize -buffer-name=tag tag tag/file<cr>
"}}}
NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}} "{{{
nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>
"}}}
NeoBundleLazy 'Shougo/unite-help', {'autoload':{'unite_sources':'help'}} "{{{
nnoremap <silent> [unite]h :<C-u>Unite -auto-resize -buffer-name=help help<cr>
"}}}
NeoBundleLazy 'Shougo/junkfile.vim', {'autoload':{'commands':'JunkfileOpen','unite_sources':['junkfile','junkfile/new']}} "{{{
nnoremap <silent> [unite]j :<C-u>Unite -auto-resize -buffer-name=junk junkfile junkfile/new<cr>
"}}}
" GIT  {{{2
NeoBundle 'airblade/vim-gitgutter'
let g:gitgutter_max_signs = 1000

NeoBundle 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
autocmd BufReadPost fugitive://* set bufhidden=delete

NeoBundle 'gitignore'

" Text editing features  "{{{2
NeoBundle  'SirVer/ultisnips'
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<leader>u"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

NeoBundle  'honza/vim-snippets'
NeoBundleLazy 'sjl/gundo.vim', { 'autoload' : {'commands': 'GundoToggle'}}
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_preview_bottom=1

NeoBundle 'tpope/vim-characterize'
NeoBundle "vits/ZoomWin"
" Zoom in and out of current window with <Leader>gz
map <silent> <Leader>gz call Zoomwin()

NeoBundle 'briandoll/change-inside-surroundings.vim'
NeoBundle 'tpope/vim-surround'
nmap <Leader>" ysiw"
nmap <Leader>' ysiw'
nmap <Leader>( ysiw(
nmap <Leader>) ysiw)
nmap <Leader>{ ysiw{
nmap <Leader>} ysiw}
nmap <Leader>[ ysiw[
nmap <Leader>] ysiw]

NeoBundle 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

NeoBundle 'tpope/vim-repeat'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-capslock'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'godlygeek/tabular'
nmap <Leader>a== :Tabularize /=<CR>
vmap <Leader>a== :Tabularize /=<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

NeoBundleLazy 'gorkunov/smartpairs.vim', {
      \ 'autoload': {
      \  'commands': [ 'SmartPairs', 'SmartPairsI', 'SmartPairsA' ],
      \  'mappings': [[ 'n', 'viv' ], [ 'v', 'v' ]]}}
NeoBundle 'rafi/vim-tinycomment.git', {
      \ 'directory': 'tinycomment',
      \ 'augroup': 'tinycomment',
      \ 'commands': [ 'TinyCommentLines', 'TinyCommentBlock' ],
      \ 'mappings': [
      \ [ 'n', '<leader>v' ], [ 'v', '<leader>v' ],
      \ [ 'v', '<leader>V' ]
      \ ]}
" Adding comments for i3 filetype
augroup tinycomment
  autocmd FileType i3 setlocal commentstring=#%s
augroup END

NeoBundle 'nelstrom/vim-markdown-folding'

" Syntax  {{{2
NeoBundleLazy 'klen/python-mode', {'autoload': {'filetypes': ['python']}}
" Neocomplete handles autocompletion
let g:pymode_rope_completion = 0
let g:pymode_lint_on_fly = 1
nmap <leader>la :PymodeLintAuto<CR>

NeoBundleLazy 'davidhalter/jedi-vim', {
      \ 'autoload': { 'filetypes' : 'python' },
      \ 'build': {
      \     'unix': 'git submodule update --init',
      \     'mac': 'git submodule update --init',
      \   },
      \ }
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"
let g:jedi#goto_assignments_command = "<leader>pa"
let g:jedi#goto_definitions_command = "<leader>pd"
let g:jedi#documentation_command = "<leader>pk"
let g:jedi#usages_command = "<leader>pu"
let g:jedi#rename_command = "<leader>pr"

NeoBundle 'jez/vim-c0'
NeoBundle 'jez/vim-ispc'
NeoBundle 'PotatoesMaster/i3-vim-syntax'
NeoBundle 'lilydjwg/colorizer'
NeoBundle 'kchmck/vim-coffee-script',{'autoload' : {
      \ 'commands' : [
      \ 'CoffeeCompile', 'CoffeeLint', 'CoffeeMake',
      \ 'CoffeeRun', 'CoffeeWatch'],
      \ 'filetypes' : ['coffee']
      \ }}
NeoBundleLazy 'vim-ruby/vim-ruby', {
      \ 'autoload': {
      \   'filetypes': 'ruby',
      \ }}
NeoBundleLazy 'rodjek/vim-puppet', {
      \ 'autoload' : {
      \   'filetypes': 'puppet',
      \}}

" Misc  {{{2
NeoBundle 'mhinz/vim-startify'
let g:startify_change_to_vcs_root = 1
let g:startify_session_dir = 'directory/sessions'
let g:startify_show_sessions = 1
autocmd User Startified setlocal buftype=

NeoBundle 'jez/vim-superman'
NeoBundle 'ingsme/create_start_fold_marker.vim'
NeoBundle 'christoomey/vim-tmux-navigator'
"NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }

if GotTheNeo == 0
  echo "Installing Bundles, please ignore key map error messages"
  echo ""
  :NeoBundleInstall
endif
call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" General settings  {{{1
set number
set relativenumber
set cursorline!
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline

" Indentation {{{2
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set nojoinspaces

" Reading/Writing {{{2
set noautowrite             " Never write a file unless I request it.
set noautowriteall          " NEVER.
set autoread                " (Don't) automatically re-read changed files.
set modeline                " Allow vim options to be embedded in files;
set modelines=5             " they must be within the first or last 5 lines.
set ffs=unix,dos,mac        " Try recognizing dos, unix, and mac line endings.
set encoding=utf-8
set backspace=2             " Makes backspace work like it should!
set scrolloff=3             " Keep 3 lines above and below cursor
set hidden
set spelllang=en,nb,nn
nnoremap <F7> :setlocal spell!<CR>
imap <c-f> <c-g>u<Esc>[s1z=``]a<c-g>u
nmap <c-f> [s1z=<c-o>

" Searching {{{2
set incsearch
set showmatch
set hlsearch
set smartcase
set ignorecase

" Folds {{{2
"set foldminlines=50
"set foldcolumn=4
set fillchars=

" History {{{2
set history=1000
set undofile
set undoreload=1000
set noswapfile

if has("syntax")
  syntax on
endif

"if has('clipboard')
"  if has('unnamedplus')
"    set clipboard=unnamed,unnamedplus
"  else
"    set clipboard=unnamed
"  endif
"endif

if has('patch-6.3.541')
  set formatoptions+=j " Remove comment leader when joining lines
endif

" Colors and fonts {{{2
"colorscheme solarized
"colorscheme hybrid
colorscheme gruvbox
"colorscheme kolor
set background=dark

" Display tabs and trailing spaces visually
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
  set list listchars=tab:▸\ ,trail:␣,extends:↷,precedes:↶
else
  set list listchars=tab:\ \ ,trail:-,extends:>,precedes:<
endif

" Arrows resize windows {{{2
noremap <Up> <c-w>+
noremap <Down> <c-w>-
noremap <Right> <c-w><
noremap <Left> <c-w>>
" change cursor position in insert mode
"inoremap <C-h> <left>
"inoremap <C-l> <right>
" +/-: Increment number
nnoremap + <c-a>
nnoremap - <c-x>

" ================ Completion ======================= {{{2
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:longest,full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" Augroup {{{2
augroup MyAuGroup
  autocmd BufNewFile,BufRead *.neobundle set filetype=vim
  autocmd BufNewFile,BufRead *.vundle set filetype=vim
  autocmd BufNewFile,BufRead *.tex set filetype=latex
  autocmd BufNewFile,BufRead *.pp set filetype=puppet
  autocmd FileType gitcommit setlocal spell
  autocmd FileType vim setlocal fdm=marker ts=2 sts=2 sw=2 fdl=99
  autocmd FileType ruby,yaml,erb,sass set ai sw=2 sts=2 ts=2 et fdl=99
  autocmd FileType python set colorcolumn=79
  " Instead of reverting the cursor to the last position in the buffer, we
  " set it to the first line when editing a git commit message
  autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
  autocmd FileType c,cpp,java,php,vim,i3,python,ruby,yaml autocmd BufWritePre <buffer> :%s/\s\+$//e
augroup END

" Make 0 go to the first character rather than the beginning
" of the line. When we're programming, we're almost always
" interested in working with text rather than empty space. If
" you want the traditional beginning of line, use ^
nnoremap 0 ^
nnoremap ^ 0

" Move between Vim and Tmux windows {{{2
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      " The sleep and & gives time to get back to vim so tmux's focus tracking
      " can kick in and send us our ^[[O
      execute "silent !sh -c 'sleep 0.01; tmux select-pane -" . a:tmuxdir . "' &"
      redraw!
    endif
  endfunction
  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te
  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<CR>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<CR>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<CR>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<CR>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" copy
 vmap <C-c> :w! ~/.vimbuf<CR>
 nmap <C-c> :.w! ~/.vimbuf<CR>

 " paste
 map <C-p> :r ~/.vimbuf<CR>

" Some usefull options {{{2
inoremap jk <esc>
vnoremap jk <esc>

"" Some toggles {{{2
nmap <silent> <unique> <Leader>tn :call ToggleRelativeAbsoluteNumber()<CR>
function! ToggleRelativeAbsoluteNumber()
  if !&number && !&relativenumber
    set number
    set norelativenumber
  elseif &number && !&relativenumber
    set nonumber
    set relativenumber
  elseif !&number && &relativenumber
    set number
    set relativenumber
  elseif &number && &relativenumber
    set nonumber
    set norelativenumber
  endif
endfunction

map <Leader>pp :call  TogglePaste()<CR>
function!  TogglePaste()
  if  !&paste
    set invpaste
    :PrettyGuidesDisable
    set nonumber
    set norelativenumber
  elseif  &paste
    set invpaste
    :PrettyGuidesEnable
    set number
    set relativenumber
  endif
endfunction

function! Preserve(command)
  let _s=@/
  let l = line(".")
  let c = col(".")
  execute a:command
  let @/=_s
  call cursor(l,c)
endfunction

"Go to last edit location with <Leader>.
nnoremap <Leader>. '.

" text bubbling {{{2
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv
" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Option toggles borrowed from tpope  {{{2
"function! s:toggle(op)
"  return eval('&'.a:op) ? 'no'.a:op : a:op
"endfunction
"
"function! s:option_map(letter, option)
"  exe 'nnoremap [o'.a:letter.' :set '.a:option.'<CR>'
"  exe 'nnoremap ]o'.a:letter.' :set no'.a:option.'<CR>'
"  exe 'nnoremap co'.a:letter.' :set <C-R>=<SID>toggle("'.a:option'")<CR><CR>'
"endfunction
"
"call s:option_map('l', 'list')
"call s:option_map('n', 'number')
"call s:option_map('r', 'relativenumber')
"call s:option_map('s', 'spell')
"call s:option_map('w', 'wrap')
"call s:option_map('p', 'paste')

" Use tab for indenting in normal/visual modes {{{2
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

nmap <silent> <Leader>qc :cclose<CR>
nmap <silent> <Leader>qo :copen<CR>

" choose buffer with <Leader>1..9 {{{2
for i in [1,2,3,4,5,6,7,8,9]
  exec "nmap <Leader>" . i . " :buffer " . i . "<cr>"
endfor
nmap <Leader><Tab> :bnext

" Create window splits easier. The default {{{2
" way is Ctrl-w,v and Ctrl-w,s. I remap
" this to vv and ss
"nnoremap <silent> vv <C-w>v
"nnoremap <silent> ss <C-w>s

"Clear current search highlight by double tapping // {{{2
nmap <silent> // :nohlsearch<CR>

" Type <Leader>hl to toggle highlighting on/off, and show current value.
noremap <Leader>hl :set hlsearch! hlsearch?<CR>

" Abbreviations
iabbrev @@ ingar.smedstad@uib.no
iabbrev ccopy Copyright 2015 Ingar Smedstad.

" w!! to write a file as sudo {{{2
cmap w!! w !sudo tee % >/dev/null
cmap W!! w !sudo tee % >/dev/null

" Execution permissions by default to shebang (#!) files {{{2
augroup shebang_chmod
  autocmd!
  autocmd BufNewFile  * let b:brand_new_file = 1
  autocmd BufWritePost * unlet! b:brand_new_file
  autocmd BufWritePre *
        \ if exists('b:brand_new_file') |
        \   if getline(1) =~ '^#!' |
        \     let b:chmod_post = '+x' |
        \   endif |
        \ endif
  autocmd BufWritePost,FileWritePost *
        \ if exists('b:chmod_post') && executable('chmod') |
        \   silent! execute '!chmod '.b:chmod_post.' "<afile>"' |
        \   unlet b:chmod_post |
        \ endif
augroup END
